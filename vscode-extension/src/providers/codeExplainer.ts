import * as vscode from 'vscode';
import { ConfigManager } from '../utils/configManager';
import { ApiClient } from '../utils/apiClient';

export class CodeExplainer {
    constructor(
        private context: vscode.ExtensionContext,
        private configManager: ConfigManager,
        private apiClient: ApiClient
    ) {}

    async explainCode(): Promise<void> {
        const editor = vscode.window.activeTextEditor;
        if (!editor) {
            vscode.window.showWarningMessage('No active editor found');
            return;
        }

        const selection = editor.selection;
        const document = editor.document;
        
        // Get selected text or entire document if no selection
        const code = selection.isEmpty 
            ? document.getText() 
            : document.getText(selection);

        if (!code.trim()) {
            vscode.window.showWarningMessage('No code selected to explain');
            return;
        }

        // Show progress
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: "Analyzing code...",
            cancellable: true
        }, async (progress, token) => {
            try {
                const response = await this.apiClient.explainCode(
                    code,
                    this.getLanguageFromDocument(document)
                );

                if (token.isCancellationRequested) {
                    return;
                }

                if (response.success && response.data?.explanation) {
                    await this.showExplanation(response.data.explanation, code);
                } else {
                    vscode.window.showErrorMessage(`Failed to explain code: ${response.error}`);
                }
            } catch (error) {
                vscode.window.showErrorMessage(`Error explaining code: ${error}`);
            }
        });
    }

    private async showExplanation(explanation: any, originalCode: string): Promise<void> {
        // Create a new document to show the explanation
        const doc = await vscode.workspace.openTextDocument({
            content: this.formatExplanation(explanation, originalCode),
            language: 'markdown'
        });

        await vscode.window.showTextDocument(doc, { preview: false });
    }

    private formatExplanation(explanation: any, originalCode: string): string {
        return `# Code Explanation

## Overview
${explanation.overview || 'No overview available'}

## What this code does
${explanation.description || 'No description available'}

## Key Components
${explanation.components?.map((comp: any) => `- **${comp.name}**: ${comp.description}`).join('\n') || 'No components identified'}

## Data Flow
${explanation.dataFlow || 'No data flow information available'}

## Dependencies
${explanation.dependencies?.map((dep: any) => `- ${dep}`).join('\n') || 'No dependencies identified'}

## Potential Issues
${explanation.issues?.map((issue: any) => `- ${issue}`).join('\n') || 'No issues identified'}

## Suggestions
${explanation.suggestions?.map((suggestion: any) => `- ${suggestion}`).join('\n') || 'No suggestions available'}

---

## Original Code
\`\`\`${this.getLanguageFromCode(originalCode)}
${originalCode}
\`\`\`

---
*Explanation generated by Coding Agent*`;
    }

    private getLanguageFromDocument(document: vscode.TextDocument): string {
        const languageMap: { [key: string]: string } = {
            'typescript': 'typescript',
            'javascript': 'javascript',
            'python': 'python',
            'java': 'java',
            'go': 'go',
            'rust': 'rust',
            'cpp': 'cpp',
            'c': 'c',
            'csharp': 'csharp',
            'php': 'php',
            'ruby': 'ruby',
            'swift': 'swift',
            'kotlin': 'kotlin'
        };

        return languageMap[document.languageId] || 'unknown';
    }

    private getLanguageFromCode(code: string): string {
        // Simple heuristic to detect language from code patterns
        if (code.includes('def ') || code.includes('import ') || code.includes('from ')) {
            return 'python';
        }
        if (code.includes('function ') || code.includes('const ') || code.includes('let ')) {
            return 'javascript';
        }
        if (code.includes('public class ') || code.includes('import java.')) {
            return 'java';
        }
        if (code.includes('func ') || code.includes('package ')) {
            return 'go';
        }
        if (code.includes('fn ') || code.includes('use ')) {
            return 'rust';
        }
        return 'text';
    }
}
