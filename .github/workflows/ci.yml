name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and format check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CLI dependencies
        run: |
          cd cli
          npm ci

      - name: Install VSCode extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Install web UI dependencies
        run: |
          cd web-ui
          npm ci

      - name: Install server dependencies
        run: |
          cd server
          pip install -r requirements.txt

      - name: Lint CLI
        run: |
          cd cli
          npm run lint

      - name: Lint VSCode extension
        run: |
          cd vscode-extension
          npm run lint

      - name: Lint web UI
        run: |
          cd web-ui
          npm run lint

      - name: Format check CLI
        run: |
          cd cli
          npm run format:check

      - name: Format check VSCode extension
        run: |
          cd vscode-extension
          npm run format:check

      - name: Format check web UI
        run: |
          cd web-ui
          npm run format:check

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install CLI dependencies
        run: |
          cd cli
          npm ci

      - name: Install VSCode extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Install web UI dependencies
        run: |
          cd web-ui
          npm ci

      - name: Type check CLI
        run: |
          cd cli
          npm run type-check

      - name: Type check VSCode extension
        run: |
          cd vscode-extension
          npm run type-check

      - name: Type check web UI
        run: |
          cd web-ui
          npm run type-check

  # Build all components
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CLI dependencies
        run: |
          cd cli
          npm ci

      - name: Install VSCode extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Install web UI dependencies
        run: |
          cd web-ui
          npm ci

      - name: Install server dependencies
        run: |
          cd server
          pip install -r requirements.txt

      - name: Build CLI
        run: |
          cd cli
          npm run build

      - name: Build VSCode extension
        run: |
          cd vscode-extension
          npm run compile

      - name: Build web UI
        run: |
          cd web-ui
          npm run build

      - name: Upload CLI build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cli-build
          path: cli/dist/

      - name: Upload VSCode extension build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-build
          path: vscode-extension/out/

      - name: Upload web UI build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-ui-build
          path: web-ui/.next/

  # Test all components
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: coding_agent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CLI dependencies
        run: |
          cd cli
          npm ci

      - name: Install VSCode extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Install web UI dependencies
        run: |
          cd web-ui
          npm ci

      - name: Install server dependencies
        run: |
          cd server
          pip install -r requirements.txt

      - name: Run CLI tests
        run: |
          cd cli
          npm test

      - name: Run VSCode extension tests
        run: |
          cd vscode-extension
          npm test

      - name: Run web UI tests
        run: |
          cd web-ui
          npm test

      - name: Run server tests
        run: |
          cd server
          python -m pytest tests/ -v

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            cli/coverage/
            vscode-extension/coverage/
            web-ui/coverage/
            server/htmlcov/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd cli && npm ci
          cd ../vscode-extension && npm ci
          cd ../web-ui && npm ci
          cd ../server && pip install -r requirements.txt

      - name: Run npm audit
        run: |
          cd cli && npm audit --audit-level moderate
          cd ../vscode-extension && npm audit --audit-level moderate
          cd ../web-ui && npm audit --audit-level moderate

      - name: Run safety check
        run: |
          cd server
          pip install safety
          safety check

      - name: Run bandit security linter
        run: |
          cd server
          pip install bandit
          bandit -r . -f json -o bandit-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            server/bandit-report.json

  # Docker build and test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: false
          tags: coding-agent/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm coding-agent/server:latest python -c "print('Docker image works!')"

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here