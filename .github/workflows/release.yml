name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and test before release
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd cli && npm ci
          cd ../vscode-extension && npm ci
          cd ../web-ui && npm ci
          cd ../server && pip install -r requirements.txt

      - name: Build all components
        run: |
          cd cli && npm run build
          cd ../vscode-extension && npm run compile
          cd ../web-ui && npm run build

      - name: Run tests
        run: |
          cd cli && npm test
          cd ../vscode-extension && npm test
          cd ../web-ui && npm test
          cd ../server && python -m pytest tests/ -v

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Build and publish CLI package
  publish-cli:
    name: Publish CLI
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          cd cli
          npm ci

      - name: Build CLI
        run: |
          cd cli
          npm run build

      - name: Publish to npm
        run: |
          cd cli
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and publish VSCode extension
  publish-vscode:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Build extension
        run: |
          cd vscode-extension
          npm run compile

      - name: Install vsce
        run: npm install -g vsce

      - name: Package extension
        run: |
          cd vscode-extension
          vsce package

      - name: Publish to VS Code Marketplace
        run: |
          cd vscode-extension
          vsce publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  # Build and deploy web UI
  deploy-web:
    name: Deploy Web UI
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd web-ui
          npm ci

      - name: Build web UI
        run: |
          cd web-ui
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./web-ui

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: coding-agent/server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Upload release assets
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [publish-cli, publish-vscode, deploy-web, build-docker, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd cli && npm ci
          cd ../vscode-extension && npm ci

      - name: Build CLI
        run: |
          cd cli
          npm run build

      - name: Build VSCode extension
        run: |
          cd vscode-extension
          npm run compile

      - name: Package CLI for distribution
        run: |
          cd cli
          npm pack

      - name: Package VSCode extension
        run: |
          cd vscode-extension
          npm install -g vsce
          vsce package

      - name: Upload CLI package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cli/coding-agent-cli-*.tgz
          asset_name: coding-agent-cli.tgz
          asset_content_type: application/gzip

      - name: Upload VSCode extension
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vscode-extension/coding-agent-*.vsix
          asset_name: coding-agent.vsix
          asset_content_type: application/zip

  # Notify about release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [upload-assets]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        with:
          args: 'ðŸš€ New release ${{ github.ref }} has been published!'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: always()